<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>怕 Bug 的我，把他寫下來就對了</title>
  
  
  <link href="https://a9261.github.io/atom.xml" rel="self"/>
  
  <link href="https://a9261.github.io/"/>
  <updated>2023-02-14T15:54:34.223Z</updated>
  <id>https://a9261.github.io/</id>
  
  <author>
    <name>Jaja</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>關於單元測試中的Stub</title>
    <link href="https://a9261.github.io/2023/02/14/a-unit-test-of-stub/"/>
    <id>https://a9261.github.io/2023/02/14/a-unit-test-of-stub/</id>
    <published>2023-02-14T14:28:58.000Z</published>
    <updated>2023-02-14T15:54:34.223Z</updated>
    
    <content type="html"><![CDATA[<p>今天來分享一個實際利用 C# 的 moq 套件。將要測試的目標方法做 stub ，再來驗證我們實際執行的方法是否正確<br>首先我們先看一下原本的方法邏輯，最後會提為什麼我們會需要做 stub<br>我們目標很簡單，希望能找出資料庫中某一張資料表 N 天之前的流水號<br>所以這裡只要流水號不是 0 就代表有成功找到了<br><img src="/2023/02/14/a-unit-test-of-stub/TestFunction.png" alt="TestFunctionExample"></p><p>接下來看一下我們原本的搜尋方式，可以看到是直接寫 T-SQL 語法抓出相關的資料並在資料庫裡進行搜尋<br>(這裡因為不需要太過精準所以只要差距在10天內就當做有找到了)<br><img src="/2023/02/14/a-unit-test-of-stub/SearchCode.png" alt="SearchCode"></p><p>再來就是進行整合測試。如果有使用 Azure Database 經驗的人會知道。如果資料庫的等級不是很高<br>在持續執行這種語法時會導致 DTU 增高或是處理速度很慢的情況<br><img src="/2023/02/14/a-unit-test-of-stub/WorseCase.png" alt="WorseCase"></p><p>所以為了讓我們能夠更單純一點去測試「 N 天之前的流水號」這件事情，我們就需要針對其它操作到資料庫的方法來做所謂的 stub<br>也就是下圖中的紅框處，包含取得一開始的資料初始值與後續在資料表中進行查找的動作</p><p><img src="/2023/02/14/a-unit-test-of-stub/NeedChange.png" alt="NeedChangeOfCode"></p><p>因為使用 moq 的關係，我這裡就先將紅框處抽出為 protect 方法並加上 virtual 供後續我們能做 stub</p><p>修改完如下圖<br><img src="/2023/02/14/a-unit-test-of-stub/ChangeResult.png" alt="ChangeResult"></p><p>再來就是回到我們的測試案例中，將原本直接呼叫流程調整為，先建立好 stub 後再進行呼叫</p><p>完成結果如下圖<br><img src="/2023/02/14/a-unit-test-of-stub/MockResult.png" alt="MockResult"></p><p>我們將原本初始化的函數以及在資料庫中搜尋的語法，調整為透過 List MockSearchData  做搜尋</p><p>這樣做的好處除了我們可以自行決定要測試的資料筆數與日期區間。相較原本採用整合測試直接在資料庫中進行處理，在這裡利用 moq 進行改寫會顯得更有效率。</p><p>如果有問題都歡迎留言進行討論，謝謝大家</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天來分享一個實際利用 C# 的 moq 套件。將要測試的目標方法做 stub ，再來驗證我們實際執行的方法是否正確&lt;br&gt;首先我們先看一下原本的方法邏輯，最後會提為什麼我們會需要做 stub&lt;br&gt;我們目標很簡單，希望能找出資料庫中某一張資料表 N 天之前的流水號&lt;br&gt;</summary>
      
    
    
    
    <category term="C#" scheme="https://a9261.github.io/categories/C/"/>
    
    
    <category term="UnitTest" scheme="https://a9261.github.io/tags/UnitTest/"/>
    
  </entry>
  
  <entry>
    <title>如何安全的設定 Web App 對外 IP 存取限制</title>
    <link href="https://a9261.github.io/2022/08/16/how-to-safe-set-web-app-Firewall/"/>
    <id>https://a9261.github.io/2022/08/16/how-to-safe-set-web-app-Firewall/</id>
    <published>2022-08-16T15:27:17.000Z</published>
    <updated>2022-08-16T16:29:32.644Z</updated>
    
    <content type="html"><![CDATA[<p>今天來分享一個安全設定 Web App 防火牆的小技巧，在線上已經運行的環境如果你任意加入了新的 IP 規則<br>這時候 Web App 會自動先設定 Deny All 再將你的 IP 規則加入，如下圖(這裡我設定 Allow )<br><img src="/2022/08/16/how-to-safe-set-web-app-Firewall/beforeSetting.png" alt="BeforeSetting"><br><img src="/2022/08/16/how-to-safe-set-web-app-Firewall/AfterSetting.png" alt="AfterSetting"></p><p>如果你是這種設定方式，會導致在你設定完所有 IP 規則之前，Web App 是不完全可用的狀態<br>會出現以下畫面<br><img src="/2022/08/16/how-to-safe-set-web-app-Firewall/Forbidden.png" alt="Forbidden"></p><p>為了避免這個情況，其實有一個更安全的做法，就是先加入一個 Allow All 的 IP 規則<br>再依序將你要的 IP 規則設定上去，最後再將 Allow All 這個規則移除掉<br>如下圖 我先設定好 Allow All IPv4 CIDR 標記法是 0.0.0.0&#x2F;0<br><img src="/2022/08/16/how-to-safe-set-web-app-Firewall/AllowAll.png" alt="AllowAll"></p><p>可以看到沒有出現 Forbidden 的畫面<br><img src="/2022/08/16/how-to-safe-set-web-app-Firewall/Ok.png" alt="Ok"></p><p>這時再將你想要加入的規則一一加入即可，記得最後要把 Allow All 移除掉，否則前面設定的規則就沒有用處了</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://docs.microsoft.com/zh-tw/azure/app-service/app-service-ip-restrictions#set-an-ip-address-based-rule">app-service-ip-restrictions</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天來分享一個安全設定 Web App 防火牆的小技巧，在線上已經運行的環境如果你任意加入了新的 IP 規則&lt;br&gt;這時候 Web App 會自動先設定 Deny All 再將你的 IP 規則加入，如下圖(這裡我設定 Allow )&lt;br&gt;&lt;img src=&quot;/2022/0</summary>
      
    
    
    
    <category term="azure" scheme="https://a9261.github.io/categories/azure/"/>
    
    
    <category term="infra" scheme="https://a9261.github.io/tags/infra/"/>
    
    <category term="azure" scheme="https://a9261.github.io/tags/azure/"/>
    
  </entry>
  
  <entry>
    <title>如何自訂義 Github page domain</title>
    <link href="https://a9261.github.io/2022/08/14/how-to-set-github-page-custom-domain/"/>
    <id>https://a9261.github.io/2022/08/14/how-to-set-github-page-custom-domain/</id>
    <published>2022-08-13T16:36:04.000Z</published>
    <updated>2022-08-13T17:31:52.527Z</updated>
    
    <content type="html"><![CDATA[<p>雖然網路上很多教學，不過這裡簡單記錄一下我設定的過程</p><p>Github Page 支援二種域名做綁定 Subdomain、Apex domain</p><p>第一種其實就是 xxx.yourdomain.com 這種常見的類型</p><p>另一種其實就是所謂的 A Record 設定 (將你的域名綁定到特定IP上)</p><p>也就是 yourdomain.com 會設定一組或多組 IP</p><p>我這裡就直接使用 A Record 設定，在 Github 官方的<a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">文件</a>中有列出所有需要綁定到的 IP</p><p>以下這四組 IP 就是需要設定的</p><pre><code>185.199.108.153185.199.109.153185.199.110.153185.199.111.153</code></pre><p>下圖為我在 Godaddy DNS 管理設定的畫面<br><img src="/2022/08/14/how-to-set-github-page-custom-domain/dns-setting-A-record.png" alt="dns-a-record"></p><p>設定好之後照官方的<a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/verifying-your-custom-domain-for-github-pages">建議</a>，會需要做一下 Domain Verify (這個動作是避免其它人將這個域名綁定到他自已的 Github 上)</p><p>首先到 Github 右上的功能選單點選 Settings<br><img src="/2022/08/14/how-to-set-github-page-custom-domain/user-settings.png" alt="user-setting"><br>接下來在左側找到 Pages (因為我們這裡要設定的是我們的GithubPage)<br><img src="/2022/08/14/how-to-set-github-page-custom-domain/user-page.png" alt="user-page"><br>再來點擊右上的 Add a domain 按鈕，並輸入你接下來想綁定的域名<br><img src="/2022/08/14/how-to-set-github-page-custom-domain/click-add-domain.png" alt="clic-add-domiain"></p><p>再來照他上面的說明把這個驗證用的資訊到你的 DNS 上做 TXT Record 設定<br><img src="/2022/08/14/how-to-set-github-page-custom-domain/add-verifiy-info.png" alt="add-txt-record"><br>如果驗證成功就會顯示一個綠色 Verified 字樣<br><img src="/2022/08/14/how-to-set-github-page-custom-domain/verifyed.png" alt="verifyed"></p><p>再來回到你的 xxx.github.io Repository 底下<br>我們要透過 Setting -&gt; Pages 來做域名的綁定<br><img src="/2022/08/14/how-to-set-github-page-custom-domain/page-setting-domain.png" alt="page-setting-domain"></p><p>這裡就簡單多了，拉到最下方的 Custom domain 區塊<br>將你要綁定的域名打上去後按 Save (這裡需要看你域名設定完 A Record 需要多久的時間更新，每個域名商需要的時間不一樣)<br>再來就可以看他 DNS 的記錄是否綁定成功，最後別忘了勾選底下的 Enforce HTTPS 這裡 Github 會自動幫你的域名申請好 HTTPS 憑證並設定上去，是不是很方便呢?<br><img src="/2022/08/14/how-to-set-github-page-custom-domain/set-my-domain.png" alt="set-my-domain"></p><p>以上就是這次域名綁定的教學，謝謝大家</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">managing-a-custom-domain-for-your-github-pages-site</a></p><p><a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/verifying-your-custom-domain-for-github-pages">verifying-your-custom-domain-for-github-pages</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;雖然網路上很多教學，不過這裡簡單記錄一下我設定的過程&lt;/p&gt;
&lt;p&gt;Github Page 支援二種域名做綁定 Subdomain、Apex domain&lt;/p&gt;
&lt;p&gt;第一種其實就是 xxx.yourdomain.com 這種常見的類型&lt;/p&gt;
&lt;p&gt;另一種其實就是所謂的</summary>
      
    
    
    
    <category term="infra" scheme="https://a9261.github.io/categories/infra/"/>
    
    
    <category term="infra" scheme="https://a9261.github.io/tags/infra/"/>
    
  </entry>
  
</feed>
